#
# Complete the 'heapsort' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY arr as parameter.
#


def swap(arr, index_1, index_2):
    temp = arr[index_2]
    arr[index_2]= arr[index_1]
    arr[index_1] = temp
    
    return temp

    
def get_child(arr,par_index, heap_length):
    c1 = 2*par_index + 1
    c2 = 2*par_index + 2
    
    if c1 >= heap_length:
        return "garbage"

    if c2 >= heap_length:
        return c1
    
    if arr[c1] >= arr[c2]:
        return c1
    
    else:
        return c2
        
        
def bubble_down(arr,heap_index,heap_length):
    child_index= get_child(arr,heap_index,heap_length)
    
    while (child_index < heap_length):
        if arr[child_index] > arr[heap_index]:
            #swap child and parent
            swap(arr,child_index,heap_index)
            heap_index = child_index
        else:
            break
        
        child_index = get_child(arr, heap_index,heap_length)
        
    
def heapsort(arr):
    # Write your code here

    #convert our unsorted array into a maxheap
    for par_index in range(len(arr)-1, -1, -1):
        bubble_down(arr,par_index,...)
        
    #convert our maxheap into a sorted array
    heap_length = len(arr)
    
    for heap_ind in range(len(arr)-1,0,-1):
        #heap_ind = heap_length-1
        #swap peak with last element
        swap(arr,0,heap_length-1)
        
        #shrink our heap_length
        heap_length -= 1
        
        #bubble down our heap
        bubble_down(arr,0,heap_length)
    
    return arr
