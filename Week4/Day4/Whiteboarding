# Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

# Example 1:

# Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
# Output: 6
# Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
# Example 2:

# Input: height = [4,2,0,3,2,5]
# Output: 9

# Constraints:

# n == height.length
# 1 <= n <= 2 * 104
# 0 <= height[i] <= 105


# every time we see a 0 after >1 then it can store water 


# 2,0,2
#             1
#     1      1 1    1
# [_1_1 1 1 1 1 1 _ 1 1]

# left max
# right max


# Pseudocode

# traverse the array
# loop from start array to current index
# record max height in left max
# loop from current index to end of array
# record max heigh in right max

# smallest of two max
# find out how tall we are
# calculate total water

def trappedRainwater(arr):
  totalRain = 0
  leftMax=0
  rightMax=0

  for i in range(1,(len(arr))-1):
    
    leftMax = arr[i]
    for l in range(i):
      leftMax = max(leftMax,arr[l])
    
    rightMax=arr[i]
    
    for r in range(i+1,len(arr)):
      rightMax = max(rightMax,arr[r])

    totalRain = totalRain + (min(leftMax,rightMax)- arr[i]) 

  return totalRain
                        # i
                        # l
                        #   r=4
print(trappedRainwater([4,2,0,3,2,5]))

